# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-$USER.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-$USER.zsh"
fi

# Python 3.12 setup
# alias python='/opt/homebrew/bin/python3.12'
# alias python3='/opt/homebrew/bin/python3.12'
# alias pip='/opt/homebrew/bin/pip3.12'

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# DevQ.ai Project Configuration
export DEVQAI_ROOT="$(pwd)"
export PYTHONPATH="$DEVQAI_ROOT:$PYTHONPATH"

# MCP Server Paths
export MCP_SERVERS_PATH="$DEVQAI_ROOT/mcp/mcp-servers"
export PTOLEMIES_PATH="$DEVQAI_ROOT/ptolemies"

# Database Configuration
export SURREALDB_URL="ws://localhost:8000/rpc"
export SURREALDB_USERNAME="root"
export SURREALDB_PASSWORD="root"
export SURREALDB_NAMESPACE="ptolemies"
export SURREALDB_DATABASE="knowledge"

# Dart AI Configuration
export DART_TOKEN="dsa_1a21dba13961ac8abbe58ea7f9cb7d5621148dc2f3c79a9d346ef40430795e8f"

# Function to display common environment variables
function show_env_vars() {
    echo "USER: $USER"
    echo "HOME: $HOME"
    echo "SHELL: $SHELL"
    echo "PWD: $PWD"
    echo "INFOPATH: $INFOPATH"
    echo "EDITOR: $EDITOR"
    echo "CONDA_EXE: $CONDA_EXE"
    echo "VIRTUAL_ENV: $VIRTUAL_ENV"
    echo "DEVQAI_ROOT: $DEVQAI_ROOT"
}

# Set the Zsh theme to Powerlevel10k
ZSH_THEME="powerlevel10k/powerlevel10k"

# Enable automatic updates for oh-my-zsh without asking
zstyle ':omz:update' mode auto
zstyle ':omz:update' frequency 13  # Check for updates every 13 days

# Disable colors in `ls`
DISABLE_LS_COLORS="false"

# Set history timestamps format
HIST_STAMPS="yyyy/mm/dd"

# Load plugins - Added zoxide
plugins=(git z zsh-autosuggestions zsh-syntax-highlighting zsh-completions autojump)

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Set the manual path for man pages
export MANPATH="/usr/local/man:$MANPATH"

# Set preferred editor based on SSH connection
if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
else
   export EDITOR='mvim'
fi

# fzf configuration
[[ -s $(brew --prefix)/opt/fzf/shell/keybindings.zsh ]] && source $(brew --prefix)/opt/fzf/shell/keybindings.zsh
[[ -s $(brew --prefix)/opt/fzf/shell/completion.zsh ]] && source $(brew --prefix)/opt/fzf/shell/completion.zsh

# Initialize zoxide (replaces cd with smart directory jumping)
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
else
    echo "‚ö†Ô∏è zoxide not found, using regular cd"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Comprehensive PATH setup
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/ServBay/bin:/Applications/ServBay/sbin:/Applications/ServBay/script:/System/Cryptexes/App/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/share/dotnet:$HOME/.dotnet/tools:/usr/local/go/bin:/Applications/quarto/bin:$HOME/.cargo/bin:$HOME/.local/bin"

# Remove duplicate PATH entries while preserving order
PATH=$(echo "$PATH" | awk -v RS=':' -v ORS=":" '!a[$1]++' | sed 's/:$//')

# Ensure Homebrew is properly set up
eval "$(/opt/homebrew/bin/brew shellenv)"

PATH=~/.console-ninja/.bin:$PATH
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/dionedge/dev/vertexai/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/dionedge/dev/vertexai/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/dionedge/dev/vertexai/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/dionedge/dev/vertexai/google-cloud-sdk/completion.zsh.inc'; fi
export CLOUDSDK_PYTHON=/opt/homebrew/opt/python@3.11/bin/python3.11
export PATH=$HOME/dev/vertexai/google-cloud-sdk/bin:$PATH
export PATH="$HOME/Library/Python/3.12/bin:$PATH"

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/dionedge/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

# DevQ.ai Project Aliases
alias devq-setup="cd $DEVQAI_ROOT && source .zshrc.devqai"
alias devq-ptolemies="z ptolemies"
alias devq-mcp="z mcp"
alias devq-test="python -m pytest"
alias devq-format="black . && isort ."
alias devq-lint="flake8 . && mypy ."

# Development Helpers
alias activate-venv="source venv/bin/activate"
alias start-surreal="surreal start --log trace --user root --pass root memory"
alias verify-db="cd $PTOLEMIES_PATH && python verify-database.py"
alias setup-db="cd $PTOLEMIES_PATH && ./setup-database.sh"

# MCP Server Management
alias start-context7="cd $MCP_SERVERS_PATH/context7-mcp && python -m context7_mcp.server"
alias start-crawl4ai="cd $MCP_SERVERS_PATH/crawl4ai-mcp && python -m crawl4ai_mcp.server"
alias start-ptolemies="cd $PTOLEMIES_PATH && python -m ptolemies.mcp.ptolemies_mcp"
alias start-dart="npx -y dart-mcp-server"

# Quick Navigation with zoxide or fallback to cd
if command -v zoxide &> /dev/null; then
    alias ag="z agentical"
    alias bayes="z bayes"
    alias darwin="z darwin"
    alias nash="z nash"
    alias ptolemies="z ptolemies"
    alias breiman="z breiman"
    alias gompertz="z gompertz"
    alias tokenator="z tokenator"
    
    # Enhanced zoxide aliases
    alias zz="z -"  # Go back to previous directory
    alias zi="zi"   # Interactive directory selection
    alias zq="zoxide query"  # Query zoxide database
    alias zr="zoxide remove"  # Remove directory from zoxide
else
    # Fallback to regular cd navigation
    alias ag="cd $DEVQAI_ROOT/agentical"
    alias bayes="cd $DEVQAI_ROOT/bayes"
    alias darwin="cd $DEVQAI_ROOT/darwin"
    alias nash="cd $DEVQAI_ROOT/nash"
    alias ptolemies="cd $DEVQAI_ROOT/ptolemies"
    alias breiman="cd $DEVQAI_ROOT/breiman"
    alias gompertz="cd $DEVQAI_ROOT/gompertz"
    alias tokenator="cd $DEVQAI_ROOT/tokenator"
fi

# Python Environment
if [ -f "$DEVQAI_ROOT/venv/bin/activate" ]; then
    alias venv="source $DEVQAI_ROOT/venv/bin/activate"
fi

# Git Helpers
alias gs="git status"
alias gp="git pull"
alias gc="git commit -m"
alias gd="git diff"
alias glog="git log --oneline --graph --decorate"

# Load environment variables if .env exists
if [ -f "$DEVQAI_ROOT/.env" ]; then
    set -a
    source "$DEVQAI_ROOT/.env"
    set +a
fi

# Custom Prompt for DevQ.ai project
if [[ "$PWD" == *"devqai"* ]]; then
    PS1="%F{cyan}[DevQ.ai]%f %F{green}%~%f $ "
fi

# Function to quickly create new components
function new-component() {
    if [ -z "$1" ]; then
        echo "Usage: new-component <component-name>"
        return 1
    fi
    mkdir -p "$DEVQAI_ROOT/$1"
    if command -v zoxide &> /dev/null; then
        z "$1"
    else
        cd "$DEVQAI_ROOT/$1"
    fi
    echo "Created and navigated to $1"
}

# Function to run MCP inspector
function mcp-inspect() {
    npx -y @modelcontextprotocol/inspector
}

# Function to test Dart AI MCP server
function dart-test() {
    echo "Testing Dart AI MCP server..."
    if [ -z "$DART_TOKEN" ]; then
        echo "‚ùå DART_TOKEN not set"
        return 1
    fi
    echo "‚úÖ DART_TOKEN is configured"
    npx -y dart-mcp-server --version 2>/dev/null || echo "Installing dart-mcp-server..."
}

# Function to find and navigate to any directory in the project
function find-dir() {
    if [ -z "$1" ]; then
        echo "Usage: find-dir <pattern>"
        return 1
    fi
    local dir=$(find $DEVQAI_ROOT -type d -name "*$1*" | head -1)
    if [ -n "$dir" ]; then
        if command -v zoxide &> /dev/null; then
            z "$dir"
        else
            cd "$dir"
        fi
    else
        echo "No directory found matching: $1"
    fi
}

# Function to search for files and open with editor
function find-edit() {
    if [ -z "$1" ]; then
        echo "Usage: find-edit <pattern>"
        return 1
    fi
    local file=$(find $DEVQAI_ROOT -name "*$1*" -type f | head -1)
    if [ -n "$file" ]; then
        $EDITOR "$file"
    else
        echo "No file found matching: $1"
    fi
}

# Auto-completion for project directories
_devqai_dirs() {
    local dirs=($(ls -d $DEVQAI_ROOT/*/ 2>/dev/null | xargs -n 1 basename))
    compadd -a dirs
}
compdef _devqai_dirs new-component
compdef _devqai_dirs find-dir

# Startup message
echo "üöÄ DevQ.ai development environment loaded!"
echo "üìÅ Project root: $DEVQAI_ROOT"
echo "üîß Available commands:"
echo "   ‚Ä¢ Quick nav: ag, bayes, darwin, nash, ptolemies, breiman, gompertz, tokenator"
echo "   ‚Ä¢ Zoxide: z <dir>, zi (interactive), zz (back), zq (query), zr (remove)"
echo "   ‚Ä¢ MCP: start-context7, start-crawl4ai, start-ptolemies, start-dart, mcp-inspect"
echo "   ‚Ä¢ Dev tools: devq-test, devq-format, devq-lint, start-surreal, verify-db"
echo "   ‚Ä¢ Utils: new-component, find-dir, find-edit, show_env_vars, dart-test"